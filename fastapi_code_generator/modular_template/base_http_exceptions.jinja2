from __future__ import annotations

import http
import typing
from collections.abc import Mapping

class ExceptionWithCode(Exception):
    def __init__(
        self,
        service_code: int,
        status_code: str | None = None,
        message: str | None = None,
        headers: Mapping[str, str] | None = None,
    ) -> None:
        self.service_code = service_code
        self.external_body = {
            "code": status_code if status_code is not None else str(service_code),
            "message": (
                message if message is not None else http.HTTPStatus(service_code).phrase
            ),
        }

        self.headers = headers

    def __str__(self) -> str:
        return f"{self.service_code}: {self.external_body}"

    def __repr__(self) -> str:
        class_name = self.__class__.__name__
        return f"{class_name}(status_code={self.service_code!r}, body={self.external_body!r})"

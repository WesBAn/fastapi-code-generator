from __future__ import annotations

import contextlib
import http

import orjson
from fastapi import FastAPI, HTTPException, Request, responses
from fastapi.exceptions import RequestValidationError


from {{info['title']}}.src import middleware
from {{info['title']}}.src import lifespan as lifespan_lib
from {{info['title']}}.src.utils import logging

from .routers import {{ routers | join(", ") }}
from . import base_http_exceptions


async def _request_json_method(self: Request):
    if not hasattr(self, "_json"):  # pragma: no branch
        body = await self.body()
        self._json = orjson.loads(body)
    return self._json


# There is no other solution to make request serialization by orjson
Request.json = _request_json_method  # type: ignore


@contextlib.asynccontextmanager
async def lifespan(app: FastAPI):
    app_life_span = lifespan_lib.LifeSpan(app)
    await app_life_span.on_init()
    yield
    await app_life_span.on_shutdown()

app = FastAPI(
    {% if info %}
    {% for key,value in info.items() %}
    {% set info_value= value.__repr__() %}
    {{ key }} = {{info_value}},
    {% endfor %}
    {% endif %}
    default_response_class=responses.ORJSONResponse,
    lifespan=lifespan,
    )

{% for router in routers -%}
app.include_router({{router}}.router)
{% endfor -%}

app.add_middleware(middleware.AppMiddleware)


def _get_common_response_tags(
    *, request: Request, service_code: int, body: dict | str | None
) -> dict:
    return {
        "http_method": request.method,
        "type": "response",
        "uri": request.url,
        "meta_type": request.url.path,
        "meta_code": service_code,
        "body": body,
    }


def _process_exc_response_logs(request: Request, service_code: int, body: dict | str | None):
    if 500 <= service_code:
        logging.logger.error(
            "[Processing response failed]",
            **_get_common_response_tags(request=request, service_code=service_code, body=body),
        )
    else:
        logging.logger.info(
            "[Processed response]",
            **_get_common_response_tags(request=request, service_code=service_code, body=body),
        )


@app.exception_handler(base_http_exceptions.ExceptionWithCode)
async def app_exception_handler(request: Request, exc: base_http_exceptions.ExceptionWithCode):
    _process_exc_response_logs(
        request=request, service_code=exc.service_code, body=exc.external_body
    )

    return responses.ORJSONResponse(
        status_code=exc.service_code,
        content=exc.external_body,
        headers=exc.headers,
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    body = {
        "code": str(exc.status_code),
        "message": http.HTTPStatus(exc.status_code).phrase,
    }
    _process_exc_response_logs(request=request, service_code=exc.status_code, body=body)

    return responses.ORJSONResponse(
        status_code=exc.status_code,
        content=body,
        headers=exc.headers,
    )


@app.exception_handler(RequestValidationError)
async def http_exception_handler_some(request: Request, exc: RequestValidationError):
    SERVICE_CODE = 400
    BODY = {"code": "400", "message": "Bad Request"}

    logging.logger.info("Invalid request data provided, details: {}", str(exc.errors()))
    _process_exc_response_logs(request=request, service_code=SERVICE_CODE, body=BODY)
    return responses.ORJSONResponse(status_code=SERVICE_CODE, content=BODY)


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    SERVICE_CODE = 500
    BODY = {"code": "500", "message": "Internal server error"}

    _process_exc_response_logs(request=request, service_code=SERVICE_CODE, body=BODY)
    return responses.ORJSONResponse(
        status_code=SERVICE_CODE,
        content=BODY,
    )
